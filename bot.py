import logging
import sqlite3
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

# ============ –ù–ê–°–¢–†–û–ô–ö–ò (—É–∂–µ —Å —Ç–≤–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏) ============
TOKEN = "8347167643:AAFoKAXwAjaSHTUkdQ2hFzqirC5CGpoLEdI"
CHANNEL_USERNAME = "@bishsh0p"          # –∫–∞–Ω–∞–ª
ADMIN_USERNAME = "nuyuki_1"             # —Ç–≤–æ–π –Ω–∏–∫ –±–µ–∑ @
SUPPORT_USERNAME = "nuyuki_1"           # –ø–æ–¥–¥–µ—Ä–∂–∫–∞
DISCUSSION_URL = "https://t.me/bishsh0p"  # —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏—è (–ø–æ—Ç–æ–º –∑–∞–º–µ–Ω–∏—à—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏)

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())

BOT_USERNAME = None
DB_PATH = "data.db"

# -------------------- –ë–ê–ó–ê --------------------
def db():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = db(); cur = conn.cursor()
    cur.execute("""CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, username TEXT, balance INTEGER DEFAULT 0)""")
    cur.execute("""CREATE TABLE IF NOT EXISTS products (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT, description TEXT, price INTEGER, photo_file_id TEXT, channel_message_id INTEGER)""")
    cur.execute("""CREATE TABLE IF NOT EXISTS qrcodes (amount INTEGER PRIMARY KEY, file_id TEXT)""")
    cur.execute("""CREATE TABLE IF NOT EXISTS topups (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, amount INTEGER, status TEXT, created_at TEXT)""")
    cur.execute("""CREATE TABLE IF NOT EXISTS purchases (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, product_id INTEGER, amount INTEGER, created_at TEXT)""")
    conn.commit(); conn.close()

def get_or_create_user(u: types.User):
    conn = db(); cur = conn.cursor()
    cur.execute("SELECT 1 FROM users WHERE user_id=?", (u.id,))
    if not cur.fetchone():
        cur.execute("INSERT INTO users(user_id, username, balance) VALUES(?,?,0)", (u.id, u.username or ""))
        conn.commit()
    conn.close()

def get_balance(uid:int)->int:
    conn = db(); cur = conn.cursor()
    cur.execute("SELECT balance FROM users WHERE user_id=?", (uid,))
    row = cur.fetchone(); conn.close()
    return int(row["balance"]) if row else 0

def add_balance(uid:int, amount:int):
    conn = db(); cur = conn.cursor()
    cur.execute("UPDATE users SET balance=COALESCE(balance,0)+? WHERE user_id=?", (amount, uid))
    conn.commit(); conn.close()

def deduct_balance(uid:int, amount:int)->bool:
    if get_balance(uid) < amount: return False
    conn = db(); cur = conn.cursor()
    cur.execute("UPDATE users SET balance=balance-? WHERE user_id=?", (amount, uid))
    conn.commit(); conn.close(); return True

def count_products()->int:
    conn = db(); cur = conn.cursor()
    cur.execute("SELECT COUNT(*) c FROM products"); c = cur.fetchone()["c"]
    conn.close(); return c

def is_admin(u: types.User)->bool:
    return (u.username or "").lower()==ADMIN_USERNAME.lower()

def main_menu_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(InlineKeyboardButton("üí≥ –ü–ª–∞—Ç–µ–∂–∏", callback_data="payments"))
    kb.add(
        InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{SUPPORT_USERNAME}"),
        InlineKeyboardButton("üë• –û–±—Å—É–∂–¥–µ–Ω–∏–µ", url=DISCUSSION_URL),
    )
    kb.add(InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"))
    return kb

def amounts_kb():
    kb = InlineKeyboardMarkup(row_width=3)
    for a in [50,100,200,500,1000,2000]:
        kb.insert(InlineKeyboardButton(str(a), callback_data=f"topup:{a}"))
    kb.add(InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="menu"))
    return kb

def buy_menu_kb(pid:int, price:int):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(InlineKeyboardButton(f"üí∏ –û–ø–ª–∞—Ç–∏—Ç—å {price} —Å –±–∞–ª–∞–Ω—Å–∞", callback_data=f"pay:{pid}"))
    kb.add(InlineKeyboardButton("üí≥ –ü–ª–∞—Ç–µ–∂–∏", callback_data="payments"))
    kb.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu"))
    return kb

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    get_or_create_user(message.from_user)
    args = message.get_args()
    if args.startswith("buy_"):
        try: pid = int(args.split("_",1)[1])
        except: await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=ReplyKeyboardRemove()); return
        conn = db(); cur = conn.cursor()
        cur.execute("SELECT * FROM products WHERE id=?", (pid,)); p = cur.fetchone(); conn.close()
        if not p: await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω."); return
        bal = get_balance(message.from_user.id)
        text = (f"<b>{p['title']}</b>\n–¶–µ–Ω–∞: <b>{p['price']} KGS</b>\n\n{p['description']}\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{bal} KGS</b>")
        await message.answer_photo(p['photo_file_id'], caption=text, reply_markup=buy_menu_kb(p['id'], p['price']))
        return
    bal = get_balance(message.from_user.id); placed = count_products()
    text = (f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n‚ö° –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BishShop ‚ö°\n\n"
            f"üìÑ –†–∞–∑–º–µ—â–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: <b>{placed}</b>\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{bal} KGS</b>")
    await message.answer(text, reply_markup=main_menu_kb())

@dp.callback_query_handler(lambda c: c.data=="menu")
async def cb_menu(c: types.CallbackQuery):
    bal = get_balance(c.from_user.id); placed = count_products()
    await c.message.answer(f"‚ö° BishShop\n\nüìÑ –†–∞–∑–º–µ—â–µ–Ω–æ: <b>{placed}</b>\nüí∞ –ë–∞–ª–∞–Ω—Å: <b>{bal} KGS</b>", reply_markup=main_menu_kb())
    await c.answer()

@dp.callback_query_handler(lambda c: c.data=="payments")
async def cb_payments(c: types.CallbackQuery):
    await c.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—É—é:", reply_markup=amounts_kb())
    await c.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("topup:"))
async def cb_topup(c: types.CallbackQuery):
    amount = int(c.data.split(":")[1])
    conn = db(); cur = conn.cursor()
    cur.execute("SELECT file_id FROM qrcodes WHERE amount=?", (amount,))
    row = cur.fetchone(); conn.close()
    if not row:
        if is_admin(c.from_user):
            await c.message.answer(f"QR –¥–ª—è {amount} KGS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–∏—à–ª–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π:\n<code>/set_qr {amount}</code>")
        else:
            await c.message.answer("‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await c.answer(); return
    file_id = row["file_id"]
    caption = (f"–û–ø–ª–∞—Ç–∞ <b>{amount} KGS</b>.\n1) –û—Ç–∫—Ä–æ–π—Ç–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n2) –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –Ω–∏–∂–µ.\n3) –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É (@{SUPPORT_USERNAME}).")
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–Ø –æ–ø–ª–∞—Ç–∏–ª", url=f"https://t.me/{SUPPORT_USERNAME}")).add(InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="menu"))
    conn = db(); cur = conn.cursor()
    cur.execute("INSERT INTO topups(user_id,amount,status,created_at) VALUES(?,?,'pending',?)",
                (c.from_user.id, amount, datetime.utcnow().isoformat()))
    conn.commit(); conn.close()
    await c.message.answer_photo(file_id, caption=caption, reply_markup=kb)
    await c.answer("–û—Ç–ø—Ä–∞–≤–∏–ª QR")

@dp.callback_query_handler(lambda c: c.data.startswith("pay:"))
async def cb_pay(c: types.CallbackQuery):
    pid = int(c.data.split(":")[1])
    conn = db(); cur = conn.cursor()
    cur.execute("SELECT * FROM products WHERE id=?", (pid,)); p = cur.fetchone(); conn.close()
    if not p: await c.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True); return
    price = int(p["price"])
    if not deduct_balance(c.from_user.id, price):
        await c.message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ ¬´–ü–ª–∞—Ç–µ–∂–∏¬ª.", reply_markup=amounts_kb()); await c.answer(); return
    conn = db(); cur = conn.cursor()
    cur.execute("INSERT INTO purchases(user_id,product_id,amount,created_at) VALUES(?,?,?,?)",
                (c.from_user.id, pid, price, datetime.utcnow().isoformat()))
    conn.commit(); conn.close()
    await c.message.answer(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ <b>{p['title']}</b> –Ω–∞ <b>{price} KGS</b> —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞.")
    await c.answer("–£—Å–ø–µ—Ö")

@dp.message_handler(commands=["set_qr"])
async def cmd_set_qr(message: types.Message):
    if not is_admin(message.from_user): return
    args = message.get_args().strip()
    if not message.reply_to_message or not message.reply_to_message.photo:
        await message.answer("–ü—Ä–∏—à–ª–∏ –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ QR.\n–ü—Ä–∏–º–µ—Ä: <code>/set_qr 500</code>"); return
    try: amount = int(args)
    except: await message.answer("–£–∫–∞–∂–∏ —Å—É–º–º—É —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: <code>/set_qr 500</code>"); return
    file_id = message.reply_to_message.photo[-1].file_id
    conn = db(); cur = conn.cursor()
    cur.execute("INSERT OR REPLACE INTO qrcodes(amount,file_id) VALUES(?,?)", (amount, file_id))
    conn.commit(); conn.close()
    await message.answer(f"QR –Ω–∞ {amount} KGS —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ")

class PostProduct(StatesGroup):
    waiting_photo = State()
    waiting_title = State()
    waiting_price = State()
    waiting_description = State()

@dp.message_handler(commands=["post"])
async def cmd_post(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user): return
    await state.finish()
    await message.answer("–ü—Ä–∏—à–ª–∏ <b>—Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞</b> —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
    await PostProduct.waiting_photo.set()

@dp.message_handler(content_types=["photo"], state=PostProduct.waiting_photo)
async def post_photo(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user): return
    await state.update_data(photo_id=message.photo[-1].file_id)
    await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞?")
    await PostProduct.waiting_title.set()

@dp.message_handler(state=PostProduct.waiting_title)
async def post_title(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user): return
    await state.update_data(title=message.text.strip())
    await message.answer("–¶–µ–Ω–∞ (KGS)?")
    await PostProduct.waiting_price.set()

@dp.message_handler(state=PostProduct.waiting_price)
async def post_price(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user): return
    try: price = int(message.text.strip())
    except: await message.answer("–í–≤–µ–¥–∏ —Ü–µ–Ω—É —á–∏—Å–ª–æ–º."); return
    await state.update_data(price=price)
    await message.answer("–ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ?")
    await PostProduct.waiting_description.set()

@dp.message_handler(state=PostProduct.waiting_description)
async def post_desc(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user): return
    await state.update_data(description=message.text.strip())
    data = await state.get_data()
    conn = db(); cur = conn.cursor()
    cur.execute("INSERT INTO products(title,description,price,photo_file_id) VALUES(?,?,?,?)",
                (data["title"], data["description"], data["price"], data["photo_id"]))
    product_id = cur.lastrowid; conn.commit(); conn.close()

    me = await bot.get_me()
    deep_url = f"https://t.me/{me.username}?start=buy_{product_id}"
    caption = f"<b>{data['title']}</b>\n–¶–µ–Ω–∞: <b>{data['price']} KGS</b>\n\n{data['description']}"
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", url=deep_url))
    msg = await bot.send_photo(chat_id=CHANNEL_USERNAME, photo=data["photo_id"], caption=caption, reply_markup=kb)

    conn = db(); cur = conn.cursor()
    cur.execute("UPDATE products SET channel_message_id=? WHERE id=?", (msg.message_id, product_id))
    conn.commit(); conn.close()

    await message.answer("‚úÖ –¢–æ–≤–∞—Ä –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ.")
    await state.finish()

@dp.message_handler(commands=["balance"])
async def cmd_balance(message: types.Message):
    get_or_create_user(message.from_user)
    await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{get_balance(message.from_user.id)} KGS</b>")

@dp.message_handler(commands=["addbalance"])
async def cmd_addbalance(message: types.Message):
    if not is_admin(message.from_user): return
    parts = message.get_args().split()
    if len(parts)!=2: await message.answer("–§–æ—Ä–º–∞—Ç: <code>/addbalance @username 500</code>"); return
    user_ref, amount_s = parts
    try: amount = int(amount_s)
    except: await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º."); return
    conn = db(); cur = conn.cursor()
    if user_ref.startswith("@"):
        cur.execute("SELECT user_id FROM users WHERE lower(username)=?", (user_ref[1:].lower(),))
    else:
        try: uid = int(user_ref); cur.execute("SELECT user_id FROM users WHERE user_id=?", (uid,))
        except: await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä."); conn.close(); return
    row = cur.fetchone(); conn.close()
    if not row: await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–æ–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start)."); return
    add_balance(row["user_id"], amount)
    await message.answer(f"–ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} KGS.")
    try: await bot.send_message(row["user_id"], f"üí∞ –ù–∞ –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} KGS.")
    except: pass

async def on_startup(_):
    global BOT_USERNAME
    init_db()
    me = await bot.get_me()
    BOT_USERNAME = me.username
    logging.info(f"Bot @{BOT_USERNAME} –∑–∞–ø—É—â–µ–Ω.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
